length(y)
head(y)
set.seed(2, sample.kind = "Rounding")
test_index <- createDataPartition(y, times = 1, p = 0.5, list = FALSE)
length(test_index)
test <- iris[test_index, ]
train <- iris[-test_index, ]
head(iris)
#now we look for the singular feature in the dataset that offer the highest overall accuracy to predict species categories
head(train)
#required libraries
library(tidyverse)
summary(train)
x <- seq(5, 7.9, 0.1)
x
train %>% group_by(Species) %>% summarise(sl = mean(Sepal.Length, sw = mean(Sepal.Width, pl = mean(Petal.Length
pw = mean(Petal.Width)))))
train %>% group_by(Species) %>% summarise(sl = mean(Sepal.Length, sw = mean(Sepal.Width, pl = mean(Petal.Length
pw = mean(Petal.Width)))))
train %>% group_by(Species) %>% summarise(sl = mean(Sepal.Length, sw = mean(Sepal.Width, pl = mean(Petal.Length,
pw = mean(Petal.Width)))))
train %>% group_by(Species) %>% summarise(sl = mean(Sepal.Length), sw = mean(Sepal.Width), pl = mean(Petal.Length),
pw = mean(Petal.Width))
mean(y_hat == train$Species)
acc_seplen <- map_dbl(x, function(x){
y_hat <- ifelse(train$Sepal.Length > x, "virginica", "versicolor") %>% factor(levels = levels(test))
mean(y_hat == train$Species)
})
level(y_hat)
acc_seplen <- map_dbl(x, function(x){
y_hat <- ifelse(train$Sepal.Length > x, "virginica", "versicolor") %>% factor(levels = levels(train))
mean(y_hat == train$Species)
})
level(train$Species)
levels(train$Species)
x <- seq(5, 7.9, 0.1)
acc_seplen <- map_dbl(x, function(x){
y_hat <- ifelse(train$Sepal.Length > x, "virginica", "versicolor") %>% factor(levels = levels(train))
mean(y_hat == train$Species)
})
acc_seplen <- map_dbl(x, function(x){
y_hat <- ifelse(train$Sepal.Length > x, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
acc_seplen
train %>% group_by(Species) %>% summarise(sl = mean(Sepal.Length), sw = mean(Sepal.Width), pl = mean(Petal.Length),
pw = mean(Petal.Width))
summary(train)
x <- seq(2, 3.8, 0.1)
acc_sepw <- map_dbl(x, function(x){
y_hat <- ifelse(train$Sepal.Width > x, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
x <- seq(3, 6.9, 0.1)
acc_petlen <- map_dbl(x, function(x){
y_hat <- ifelse(train$Petal.Length > x, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
x <- seq(1, 2.5, 0.1)
acc_petw <- map_dbl(x, function(x){
y_hat <- ifelse(train$Petal.Width > x, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
max(max(acc_seplen), max(acc_sepw), max(acc_petlen), max(acc_petw))
which.max(max(acc_seplen), max(acc_sepw), max(acc_petlen), max(acc_petw))
m <- max(max(acc_seplen), max(acc_sepw), max(acc_petlen), max(acc_petw))
which(m)
m <- c(max(acc_seplen), max(acc_sepw), max(acc_petlen), max(acc_petw))
m
m <- c(m_sl = max(acc_seplen), m_sw = max(acc_sepw), m_pl = max(acc_petlen), m_pw = max(acc_petw))
m
x_sl <- seq(5, 7.9, 0.1)
acc_seplen <- map_dbl(x, function(x){
y_hat <- ifelse(train$Sepal.Length > x_sl, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
x_sw <- seq(2, 3.8, 0.1)
acc_sepw <- map_dbl(x, function(x){
y_hat <- ifelse(train$Sepal.Width > x_sw, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
x_pl <- seq(3, 6.9, 0.1)
acc_petlen <- map_dbl(x, function(x){
y_hat <- ifelse(train$Petal.Length > x_pl, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
x_pw <- seq(1, 2.5, 0.1)
acc_petw <- map_dbl(x, function(x){
y_hat <- ifelse(train$Petal.Width > x_pw, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
m <- c(m_sl = max(acc_seplen), m_sw = max(acc_sepw), m_pl = max(acc_petlen), m_pw = max(acc_petw))
m
x_sl <- seq(5, 7.9, 0.1)
acc_seplen <- map_dbl(x, function(x){
y_hat <- ifelse(train$Sepal.Length > x_sl, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
x_sw <- seq(2, 3.8, 0.1)
acc_sepw <- map_dbl(x, function(x){
y_hat <- ifelse(train$Sepal.Width > x_sw, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
x_pl <- seq(3, 6.9, 0.1)
acc_petlen <- map_dbl(x, function(x){
y_hat <- ifelse(train$Petal.Length > x_pl, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
x_pw <- seq(1, 2.5, 0.1)
acc_petw <- map_dbl(x, function(x){
y_hat <- ifelse(train$Petal.Width > x_pw, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
m <- c(m_sl = max(acc_seplen), m_sw = max(acc_sepw), m_pl = max(acc_petlen), m_pw = max(acc_petw))
m
x_sl <- seq(5, 7.9, 0.1)
acc_seplen <- map_dbl(x, function(x){
y_hat <- ifelse(train$Sepal.Length > x_sl, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
x_sw <- seq(2, 3.8, 0.1)
acc_sepw <- map_dbl(x, function(x){
y_hat <- ifelse(train$Sepal.Width > x_sw, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
x_pl <- seq(3, 6.9, 0.1)
acc_petlen <- map_dbl(x, function(x){
y_hat <- ifelse(train$Petal.Length > x_pl, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
x_pw <- seq(1, 2.5, 0.1)
acc_petw <- map_dbl(x, function(x){
y_hat <- ifelse(train$Petal.Width > x_pw, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
m <- c(m_sl = max(acc_seplen), m_sw = max(acc_sepw), m_pl = max(acc_petlen), m_pw = max(acc_petw))
m
x_sl <- seq(5, 7.9, 0.1)
acc_seplen <- map_dbl(x, function(x){
y_hat <- ifelse(train$Sepal.Length > x_sl, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
x_sw <- seq(2, 3.8, 0.1)
acc_sepw <- map_dbl(x, function(x){
y_hat <- ifelse(train$Sepal.Width > x_sw, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
x_pl <- seq(3, 6.9, 0.1)
acc_petlen <- map_dbl(x, function(x){
y_hat <- ifelse(train$Petal.Length > x_pl, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
x_pw <- seq(1, 2.5, 0.1)
acc_petw <- map_dbl(x, function(x){
y_hat <- ifelse(train$Petal.Width > x_pw, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
m <- c(m_sl = max(acc_seplen), m_sw = max(acc_sepw), m_pl = max(acc_petlen), m_pw = max(acc_petw))
m
x_sl <- seq(5, 7.9, 0.1)
acc_seplen <- map_dbl(x, function(x){
y_hat <- ifelse(train$Sepal.Length > x_sl, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
x_sw <- seq(2, 3.8, 0.1)
acc_sepw <- map_dbl(x, function(x){
y_hat <- ifelse(train$Sepal.Width > x_sw, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
x_pl <- seq(3, 6.9, 0.1)
acc_petlen <- map_dbl(x, function(x){
y_hat <- ifelse(train$Petal.Length > x_pl, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
x_pw <- seq(1, 2.5, 0.1)
acc_petw <- map_dbl(x, function(x){
y_hat <- ifelse(train$Petal.Width > x_pw, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
m <- c(m_sl = max(acc_seplen), m_sw = max(acc_sepw), m_pl = max(acc_petlen), m_pw = max(acc_petw))
m
x_sl <- seq(5, 7.9, 0.1)
acc_seplen <- map_dbl(x, function(x){
y_hat <- ifelse(train$Sepal.Length > x_sl, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
x_sw <- seq(2, 3.8, 0.1)
acc_sepw <- map_dbl(x, function(x){
y_hat <- ifelse(train$Sepal.Width > x_sw, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
x_pl <- seq(3, 6.9, 0.1)
acc_petlen <- map_dbl(x, function(x){
y_hat <- ifelse(train$Petal.Length > x_pl, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
x_pw <- seq(1, 2.5, 0.1)
acc_petw <- map_dbl(x, function(x){
y_hat <- ifelse(train$Petal.Width > x_pw, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
m <- c(m_sl = max(acc_seplen), m_sw = max(acc_sepw), m_pl = max(acc_petlen), m_pw = max(acc_petw))
m
x_sl <- seq(5, 7.9, 0.1)
acc_seplen <- map_dbl(x_sl, function(x){
y_hat <- ifelse(train$Sepal.Length > x, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
x_sw <- seq(2, 3.8, 0.1)
acc_sepw <- map_dbl(x_sw, function(x){
y_hat <- ifelse(train$Sepal.Width > x, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
x_pl <- seq(3, 6.9, 0.1)
acc_petlen <- map_dbl(x_pl, function(x){
y_hat <- ifelse(train$Petal.Length > x, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
x_pw <- seq(1, 2.5, 0.1)
acc_petw <- map_dbl(x_pw, function(x){
y_hat <- ifelse(train$Petal.Width > x, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
m <- c(m_sl = max(acc_seplen), m_sw = max(acc_sepw), m_pl = max(acc_petlen), m_pw = max(acc_petw))
m
x_pl[which.max(acc_petlen)]
x_pl
#now we look for the singular feature in the dataset that offer the highest overall accuracy to predict species categories
head(train)
#let's chech the overall accuracy in the test dataset for the precedent best result
y_hat <- ifelse(test$Petal.Length > 4.7, "virginica", "versicolor") %>% factor(levels = levels(test$Species))
mean(y_hat == test$Species)
#testing if overtrain case
#we will repeat the same operations for determining accuracy levels but using the test dataset
acc_seplen <- map_dbl(x_sl, function(x){
y_hat <- ifelse(test$Sepal.Length > x, "virginica", "versicolor") %>% factor(levels = levels(test$Species))
mean(y_hat == test$Species)
})
x_sw <- seq(2, 3.8, 0.1)
acc_sepw <- map_dbl(x_sw, function(x){
y_hat <- ifelse(test$Sepal.Width > x, "virginica", "versicolor") %>% factor(levels = levels(test$Species))
mean(y_hat == test$Species)
})
x_pl <- seq(3, 6.9, 0.1)
acc_petlen <- map_dbl(x_pl, function(x){
y_hat <- ifelse(test$Petal.Length > x, "virginica", "versicolor") %>% factor(levels = levels(test$Species))
mean(y_hat == test$Species)
})
x_pw <- seq(1, 2.5, 0.1)
acc_petw <- map_dbl(x_pw, function(x){
y_hat <- ifelse(test$Petal.Width > x, "virginica", "versicolor") %>% factor(levels = levels(test$Species))
mean(y_hat == test$Species)
})
m <- c(m_sl = max(acc_seplen), m_sw = max(acc_sepw), m_pl = max(acc_petlen), m_pw
m   #the 'Petal.Length' feature bears the highest overall accuracy which is 96%
m  #the 'Petal.Length' feature bears the highest overall accuracy which is 96%
x_pl[which.max(acc_petlen)]   #the precedent accuracy corresponds to a cutoff of 4.7
x_sl <- seq(5, 7.9, 0.1)
acc_seplen <- map_dbl(x_sl, function(x){
y_hat <- ifelse(test$Sepal.Length > x, "virginica", "versicolor") %>% factor(levels = levels(test$Species))
mean(y_hat == test$Species)
})
x_sw <- seq(2, 3.8, 0.1)
acc_sepw <- map_dbl(x_sw, function(x){
y_hat <- ifelse(test$Sepal.Width > x, "virginica", "versicolor") %>% factor(levels = levels(test$Species))
mean(y_hat == test$Species)
})
x_pl <- seq(3, 6.9, 0.1)
acc_petlen <- map_dbl(x_pl, function(x){
y_hat <- ifelse(test$Petal.Length > x, "virginica", "versicolor") %>% factor(levels = levels(test$Species))
mean(y_hat == test$Species)
})
x_pw <- seq(1, 2.5, 0.1)
acc_petw <- map_dbl(x_pw, function(x){
y_hat <- ifelse(test$Petal.Width > x, "virginica", "versicolor") %>% factor(levels = levels(test$Species))
mean(y_hat == test$Species)
})
m <- c(m_sl = max(acc_seplen), m_sw = max(acc_sepw), m_pl = max(acc_petlen), m_pw = max(acc_petw))
m  #the 'Petal.
x_pw[which.max(acc_petw)]   #the precedent accuracy corresponds to a cutoff of 4.7
#now let's perform some exploratory analysis on the dataset
plot(iris, pch=21, bg=iris$Species)
?plot
head(iris)
summary(iris)
str(iris)
#now let's perform some exploratory analysis on the dataset
plot(iris, pch=., bg=iris$Species)
#now let's perform some exploratory analysis on the dataset
plot(iris, pch=".", bg=iris$Species)
#now let's perform some exploratory analysis on the dataset
plot(iris, pch=".", cex=5, bg=iris$Species)
#now let's perform some exploratory analysis on the dataset
plot(iris, pch=29, bg=iris$Species)
#now let's perform some exploratory analysis on the dataset
plot(iris, pch=21, bg=iris$Species)
#now let's perform some exploratory analysis on the dataset
plot(iris, bg=iris$Species)
#now let's perform some exploratory analysis on the dataset
plot(iris, pch=21, bg=iris$Species)
#now let's perform some exploratory analysis on the dataset
plot(iris, pch=21, bg=iris$Species, labels(bg))
#now let's perform some exploratory analysis on the dataset
plot(iris, pch=21, bg=iris$Species, legend())
#now let's perform some exploratory analysis on the dataset
plot(iris, pch=21, bg=iris$Species, legend(iris$Species)
#now let's perform some exploratory analysis on the dataset
plot(iris, pch=21, bg=iris$Species, legend(iris$Species))
#now let's perform some exploratory analysis on the dataset
plot(iris, pch=21, bg=iris$Species, legend(iris$Species))
#now let's perform some exploratory analysis on the dataset
plot(iris, pch=21, bg=iris$Species, legend())
summary(iris)
x_pl <- seq(3, 6.9, 0.1)
acc_petlen <- map_dbl(x_pl, function(x){
y_hat <- ifelse(train$Petal.Length > x, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
x_pw <- seq(1, 2.5, 0.1)
acc_petw <- map_dbl(x_pw, function(x){
y_hat <- ifelse(train$Petal.Width > x, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
m <- c(m_sl = max(acc_seplen), m_sw = max(acc_sepw), m_pl = max(acc_petlen), m_pw = max(acc_petw))
m   #the 'Petal.Length' feature bears the highest overall accuracy which is 96%
x_pl[which.max(acc_petlen)]   #the precedent accuracy corresponds to a cutoff of 4.7
x_pl[which.max(acc_petlen, acc_petw)]   #the precedent accuracy corresponds to a cutoff of 4.7
x_pl[which.max(acc_petlen)]   #the precedent accuracy corresponds to a cutoff of 4.7
x_pl[which.max(acc_petw)]
#let's chech the overall accuracy in the test dataset for the precedent best result
y_hat <- ifelse(or(test$Petal.Length > 4.7, test$Petal.Width > 3.5), "virginica", "versicolor") %>% factor(levels = levels(test$Species))
#let's chech the overall accuracy in the test dataset for the precedent best result
y_hat <- ifelse(test$Petal.Length > 4.7 | test$Petal.Width > 3.5, "virginica", "versicolor") %>% factor(levels = levels(test$Species))
mean(y_hat == test$Species) #the accuracy is 90%
#let's chech the overall accuracy in the test dataset for the precedent best result
y_hat <- ifelse((test$Petal.Length > 4.7 | test$Petal.Width > 3.5), "virginica", "versicolor") %>% factor(levels = levels(test$Species))
mean(y_hat == test$Species) #the accuracy is 90%
?or()
x_pl <- seq(3, 6.9, 0.1)
acc_petlen <- map_dbl(x_pl, function(x){
y_hat <- ifelse(train$Petal.Length > x, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
x_pw <- seq(1, 2.5, 0.1)
acc_petw <- map_dbl(x_pw, function(x){
y_hat <- ifelse(train$Petal.Width > x, "virginica", "versicolor") %>% factor(levels = levels(train$Species))
mean(y_hat == train$Species)
})
m <- c(m_sl = max(acc_seplen), m_sw = max(acc_sepw), m_pl = max(acc_petlen), m_pw = max(acc_petw))
m   #the 'Petal.Length' and feature
x_pl[which.max(acc_petlen)]   #best accuracy corresponds to a cutoff of 4.7 for "Petal.Length"
x_pw[which.max(acc_petw)]     #best accuracy corresponds to a cutoff of 3.5 for "Petal.Width"
#let's check the overall accuracy in the test dataset for the precedent best result
y_hat <- ifelse(test$Petal.Length > 4.7 | test$Petal.Width > 1.5, "virginica", "versicolor") %>%
factor(levels = levels(test$Species))
mean(y_hat == test$Species) #the accuracy is 90%
#Comprehensive check (PART 3) : conditionnal probabilities 1
set.seed(1, sample.kind = "Rounding") # if using R 3.6 or later
disease <- sample(c(0,1), size=1e6, replace=TRUE, prob=c(0.98,0.02))
disease[10]
disease[100]
disease[110]
disease[125]
disease[n=10]
disease
disease[16]
disease[18]
mean(disease == 1)
mean(disease == 0)
test <- rep(NA, 1e6)
test[disease==0] <- sample(c(0,1), size=sum(disease==0), replace=TRUE, prob=c(0.90,0.10))
test
test[disease==1] <- sample(c(0,1), size=sum(disease==1), replace=TRUE, prob=c(0.15, 0.85))
test
mean(test == 1)
round(mean(test == 1), 2)
caret::confusionMatrix(data = test, reference = disease)
caret::confusionMatrix(data = as.factor(test), reference = as.factor(disease))
?confusionMatrix
caret::confusionMatrix(data = as.factor(test), reference = as.factor(disease), positive = 1)
caret::confusionMatrix(data = as.factor(test), reference = as.factor(disease), positive = "1")
table(test, disease)
16853/(16853+3065)
882426/(882426+97656)
16853/(16853+97656)
3065/(3065+882426)
882426/(3065+882426)
882426/(3065+882426)
3065/(3065+882426)
mean(disease == 1)
disease
disease[test==0]
mean(disease[test==0])
mean(disease[test==1])
#Comprehensive check (PART 3) : conditionnal probabilities 2
?qplot()
library(tidyverse)
library(ggplot2)
library(caret)
#Comprehensive check (PART 3) : conditionnal probabilities 2
data(height)
#Comprehensive check (PART 3) : conditionnal probabilities 2
data(heights)
#Comprehensive check (PART 3) : conditionnal probabilities 2
data(heigths)
#Comprehensive check (PART 3) : conditionnal probabilities 2
data(heigth)
library(dslabs)
#Comprehensive check (PART 3) : conditionnal probabilities 2
data(heigths)
#Comprehensive check (PART 3) : conditionnal probabilities 2
data(heights)
head(heights)
heights %>%
mutate(height = round(height)) %>%
group_by(height) %>%
summarize(p = mean(sex == "Male")) %>%
qplot(height, p, data =.)
heights[height==50]
heights[heights$height==50]
heights[heights$height==50,]
cut(x, quantile(x, seq(0, 1, 0.1)), include.lowest = TRUE)
?cut()
cut(heights$height, quantile(heights$height, seq(0, 1, 0.1)), include.lowest = TRUE)
?quantile()
quantile(heights$height)
View(heights)
quantile(heights$height, seq(0, 1, 0.1))
?cut()
?qplot()
heights %>%
mutate(g = cut(height, quantile(height, ps), include.lowest = TRUE)) %>%
group_by(g) %>%
summarize(p = mean(sex == "Male"), height = mean(height)) %>%
qplot(height, p, data =.)
ps <- seq(0, 1, 0.1)
heights %>%
mutate(g = cut(height, quantile(height, ps), include.lowest = TRUE)) %>%
group_by(g) %>%
summarize(p = mean(sex == "Male"), height = mean(height)) %>%
qplot(height, p, data =.)
heights %>%
mutate(g = cut(height, quantile(height, ps), include.lowest = TRUE)) %>%
group_by(g) %>%
summarize(p = mean(sex == "Male"), height = mean(height)) %>%
qplot(height, p)
heights %>%
mutate(g = cut(height, quantile(height, ps), include.lowest = TRUE)) %>%
group_by(g) %>%
summarize(p = mean(sex == "Male"), height = mean(height))
heights %>%
mutate(g = cut(height, quantile(height, ps), include.lowest = TRUE)) %>%
group_by(g) %>%
summarize(p = mean(sex == "Male"), height = mean(height)) %>%
qplot(height, p, data =.)
Sigma <- 9*matrix(c(1,0.5,0.5,1), 2, 2)
Sigma
matrix(c(1,0.5,0.5,1), 2, 2)
matrix(c(1,0.52,0.5,1), 2, 2)
dat <- MASS::mvrnorm(n = 10000, c(69, 69), Sigma) %>%
data.frame() %>% setNames(c("x", "y"))
dat
MASS::mvrnorm(n = 10000, c(69, 69), Sigma)
plot(dat)
dat %>%
mutate(g = cut(x, quantile(x, ps), include.lowest = TRUE)) %>%
group_by(g) %>%
summarize(y = mean(y), x = mean(x)) %>%
qplot(x, y, data =.)
abline()
?abline()
abline(0,1)
dat %>%
mutate(g = cut(x, quantile(x, ps), include.lowest = TRUE)) %>%
group_by(g) %>%
summarize(y = mean(y), x = mean(x)) %>%
qplot(x, y, data =.)
abline(0,1)
abline(66,1)
dat %>%
mutate(g = cut(x, quantile(x, ps), include.lowest = TRUE)) %>%
group_by(g) %>%
summarize(y = mean(y), x = mean(x)) %>%
qplot(x, y, data =.)
abline(66,1)
abline(a=66,b=1)
dat %>%
mutate(g = cut(x, quantile(x, ps), include.lowest = TRUE)) %>%
group_by(g) %>%
summarize(y = mean(y), x = mean(x)) %>%
qplot(x, y, data =.)
abline(a=67,b=1)
dat %>%
mutate(g = cut(x, quantile(x, ps), include.lowest = TRUE)) %>%
group_by(g) %>%
summarize(y =(y), x =(x)) %>%
qplot(x, y, data =.)
dat <- MASS::mvrnorm(n = 10000, c(69, 69), Sigma) %>%
data.frame() %>% setNames(c("x", "y"))
dat <- MASS::mvrnorm(n = 10000, c(69, 69), Sigma) %>%
data.frame() %>% setNames(c("x", "y"))
plot(dat)
dat %>%
mutate(g = cut(x, quantile(x, ps), include.lowest = TRUE)) %>%
group_by(g) %>%
summarize(y = mean(y), x = mean(x)) %>%
qplot(x, y, data =.)
xyg <- dat %>% mutate(g = cut(x, quantile(x, pst), include.lowest = TRUE))
xyg <- dat %>% mutate(g = cut(x, quantile(x, ps), include.lowest = TRUE))
View(xyg)
test <- rep(NA, 1e6)
head(test)
